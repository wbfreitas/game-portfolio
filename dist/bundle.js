!function(t){var i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=i,e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var o in t)e.d(n,o,function(i){return t[i]}.bind(null,o));return n},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";e.r(i);var n,o,s=function(){function t(){this.imgs=[]}return t.prototype.addImage=function(t,i){var e=new Image;e.src=i,t.setImage(e),this.imgs.push(e)},t.prototype.load=function(t){var i=this;this.imgs.forEach((function(e){e.onload=function(){i.loads++,i.loads==i.imgs.length&&t()}}))},t}(),r=function(){function t(t,i){this.context=t,this.canvas=i,this.sprintes=[],this.isEnable=!0,this.images=new s}return t.prototype.addSprintAndImg=function(t,i){this.images.addImage(t,i),this.addSprint(t)},t.prototype.addSprint=function(t){this.sprintes.push(t),this.nextFrame()},t.prototype.enable=function(){this.isEnable=!0},t.prototype.disable=function(){this.isEnable=!1},t.prototype.cleanScreen=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},t.prototype.nextFrame=function(){var t=this;this.isEnable&&(this.cleanScreen(),this.sprintes.forEach((function(t){t.update()})),this.sprintes.forEach((function(t){t.draw()})),requestAnimationFrame((function(){return t.nextFrame()})))},t}(),a=function(){function t(t){this.keyPress={},this.actions=[],this.functionAction=[],this.element=t,this.startEvent(),this.stopEvent()}return t.prototype.startEvent=function(){var t=this;this.element.addEventListener("keydown",(function(i){var e=i.keyCode;t.keyPress[e]=!0,t.actions[e]=!0}))},t.prototype.stopEvent=function(){var t=this;this.element.addEventListener("keyup",(function(i){var e=i.keyCode;t.keyPress[e]=!1,t.actions[e]=!1}))},t.prototype.keyPressed=function(t){return this.keyPress[t]},t.prototype.callAction=function(t,i){this.functionAction[t]=i},t}(),h=function(){function t(t,i,e){this.context=t,this.linesNum=i,this.columnsNum=e,this.column=0,this.line=0,this.image=new Image,this.imageWidth=0,this.imageHeiht=0}return t.prototype.setImage=function(t){this.image=t},t.prototype.nextFrame=function(){var t=(new Date).getTime();this.lastTime||(this.lastTime=t),t-this.lastTime<this.interval||(this.column<this.columnsNum-1?this.column++:this.column=0,this.lastTime=t)},t.prototype.draw=function(){var t=this.imageWidth,i=this.imageHeiht;this.context.drawImage(this.image,t*this.column,i*this.line,t,i,this.x,this.y,t,i)},t}(),c=(n=function(t,i){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)i.hasOwnProperty(e)&&(t[e]=i[e])})(t,i)},function(t,i){function e(){this.constructor=t}n(t,i),t.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}),u=function(t){function i(i,e){var n=t.call(this,i,1,1)||this;return n.interations=e,n.speedX=.1,n.speedY=.1,n.rotate=0,n.interval=60,n.x=Math.floor(Math.random()*n.context.canvas.width)+1,n.y=Math.floor(Math.random()*n.context.canvas.height)+1,n}return c(i,t),i.prototype.update=function(){var t=this.context;this.x>t.canvas.width-30?this.speedX*=-1:this.x<0&&(this.speedX=.1),this.y>t.canvas.height-30?this.speedY*=-1:this.y<0&&(this.speedY=.1),this.x+=this.speedX,this.y+=this.speedY},i.prototype.draw=function(){this.context.save(),this.context.translate(this.x,this.y),this.context.rotate(this.rotate/180/Math.PI),this.context.drawImage(this.image,-16,-16,30,30),this.context.restore(),this.rotate+=2},i}(h),p=function(){function t(t,i){this.context=t,this.color="yellow",this.width=5,this.height=10,this.shoting=!1,this.x=0,this.y=0,this.x=i.x,this.y=i.y-40}return t.prototype.update=function(){this.y--},t.prototype.draw=function(){var t=this.context;t.save(),t.fillStyle=this.color,t.fillRect(this.x,this.y,this.width,this.height),t.restore()},t.prototype.setImage=function(){},t}();!function(t){t[t.LEFT=37]="LEFT",t[t.UP=38]="UP",t[t.RIGHT=39]="RIGHT",t[t.DOWN=40]="DOWN",t[t.SPACE=32]="SPACE"}(o||(o={}));var f=function(){var t=function(i,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)i.hasOwnProperty(e)&&(t[e]=i[e])})(i,e)};return function(i,e){function n(){this.constructor=i}t(i,e),i.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),d=function(t){function i(i,e,n){var s=t.call(this,i,1,1)||this;return s.interations=e,s.animation=n,s.waking=!1,s.diraction=o.RIGHT,s.speed=1,s.rotate=0,s.shoting=!1,s.interval=60,s.x=200,s.y=i.canvas.height-40,s}return f(i,t),i.prototype.verifyDiraction=function(t){return this.interations.keyPressed(t)&&!this.waking},i.prototype.isWalking=function(){var t=!1;for(var i in o)this.verifyDiraction(o.RIGHT)&&(t=!0);this.waking=t},i.prototype.addShot=function(){if(this.interations.keyPressed(o.SPACE)&&!this.shoting){var t=new p(this.context,this);this.animation.sprintes.push(t),t.draw(),this.shoting=!0}else this.interations.keyPressed(o.SPACE)||(this.shoting=!1)},i.prototype.update=function(){this.isWalking(),this.addShot(),this.verifyDiraction(o.RIGHT)&&(this.x+=this.speed,this.rotate=5),this.verifyDiraction(o.LEFT)&&(this.x-=this.speed,this.rotate=15),this.verifyDiraction(o.UP)&&(this.y-=this.speed,this.rotate=0),this.verifyDiraction(o.DOWN)&&(this.y+=this.speed,this.rotate=10)},i.prototype.draw=function(){this.context.save(),this.context.translate(this.x,this.y),this.context.rotate(this.rotate/Math.PI),this.context.drawImage(this.image,-15,-15,30,40),this.context.restore()},i}(h);var l=[{imagePath:"java.png"},{imagePath:"js.png"},{imagePath:"github.png"}];!function(){!function(){var t=window.innerWidth,i=window.innerHeight,e=document.getElementById("canvas_sonic");e.setAttribute("width",t),e.setAttribute("height",i)}();var t=document.getElementById("canvas_sonic"),i=t.getContext("2d"),e=new r(i,t),n=new a(document),o=new d(i,n,e);e.addSprintAndImg(o,"nave.png"),l.forEach((function(t){var o=new u(i,n);e.addSprintAndImg(o,t.imagePath)})),e.images.load((function(){e.enable()}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,